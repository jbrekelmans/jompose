language: go

# Force-enable Go modules. This will be unnecessary when Go 1.12 lands.
env:
- GO111MODULE=on

# You don't need to test on very old version of the Go compiler. It's the user's
# responsibility to keep their compilers up to date.
go:
- 1.12.x

# Skip the install step. Don't `go get` dependencies. Only build with the code	
# in vendor/
install: true

# # Anything in before_script that returns a nonzero exit code will flunk the	
# # build and immediately stop. It's sorta like having set -e enabled in bash.	
# # Make sure golangci-lint is vendored.
before_script:
- curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh |
  sh -s -- -b "$(go env GOPATH)"/bin v1.15.0
- go get github.com/mattn/goveralls
# - make modules

# Script always runs to completion (set +e). If we have linter issues AND a	
# failing test, we want to see both. Configure golangci-lint with a	
# .golangci.yml file at the top level of your repo.
script:
- golangci-lint run --deadline=30m
- go test -v -covermode=count -coverprofile=profile.cov ./...
- $GOPATH/bin/goveralls -coverprofile=profile.cov -service=travis-ci

before_deploy:
- |
  export CGO_ENABLED
  CGO_ENABLED=0
  export GOOS
  for T in linux darwin; do
    mkdir -p release/"$T"
    GOOS=$T
    go build -a -installsuffix cgo -o release/"$T"/kube-compose .
    (
      cd release/"$T"
      tar -zcvf kube-compose.tar.gz kube-compose
      mv kube-compose ../kube-compose."$T"
      mv kube-compose.tar.gz ../kube-compose."$T".tar.gz
    )
  done

deploy:
  provider: releases
  api_key:
    secure: "lMNP+jt7wwI8r9iIG1PANEJ5gWRUMrMll+vjAv2slK7+jVGTTQ83z4u/pj06izlr8YhxcXwR3f/o1CatoF8s/MRPEW60WdTeX1R/PLHkszj6g+ySjpzwL/qf43VkxVJ8e/NtEvOSW+mFHRvg5FDnF2IzWxyXceYHpsIsRQSrYTyUsiSpK0aThHNaF51WmdC5p/TQSsV0P0ReLcuovBSMPaHtH0t8hWLi1D2aFTKkQoLGBmNXDWuhus0oapyH5ffNXT/qwnT/W8o55EYbSJQgqyk0xSqOnrFObW41GaKE7a0yooRtMZEszU5ciUImnDAaPO2b+3ntBt68lKxcnDtaNNRqZQRUs69XQ/ZVNJucNykG/BN1MmGofMtMB8bAQ1UkR+9OQQeKLot6IoDx+ZxNOmEsO9jSgVXPzHwMERqVL0zyOl2W3J45FP5RtdOD5N0/yRXjGLzLLcY5BsliH99SuQqSNRFPWULREA+/FFKKJYeX117zLzXmm1dBIfKXaCL1VEFVdXYE+ju6YEsaHBdTfrCWLkWuVSjLnVzdrW62Sr0q2d+uErAH9/PxDC6Lfj+3Nten/SmLJ+z3c1iMB4P44EvF4QAzTZPKQF5sxJbvKQZxmPyc2VmK+vrvQheZg2hao/ZRn0wbB3ZTatU7mfJawTVIyB5wVxbPydXlTmdwUlc="
  file:
    - release/kube-compose.darwin
    - release/kube-compose.darwin.tar.gz
    - release/kube-compose.linux
    - release/kube-compose.linux.tar.gz
  # Make sure you have skip_cleanup set to true, otherwise Travis CI will delete all the files created during the build, which will probably delete what you are trying to upload.
  skip_cleanup: true
  # Overwrite existing files
  overwrite: true
  on:
    repo: jbrekelmans/kube-compose
    # Only deploy when on matching branch selector
    branch: master
    # With on.tags: true, your Releases deployment will trigger if and only if the build is a tagged build.
    tags: true

